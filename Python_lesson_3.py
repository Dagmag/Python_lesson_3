"""Урок 3. Функции"""

"""1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, 
предусмотреть обработку ситуации деления на ноль."""


def division():
    try:
        x = int(input("Введите делимое: "))
        y = int(input("Введите делитель: "))
        result = x / y
    except ZeroDivisionError:
        return "Деление на ноль невозможно!"
    return result


print("Результат деления: ", division())

""" 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. 
Осуществить вывод данных о пользователе одной строкой."""

name = input('Введите ваше имя: ')
s_name = input('Введите вашу фамилию: ')
year = int(input('Введите год вашего рождения: '))
city = input('Введите город проживания: ')
email = input('Введите ваш адрес эл. почты: ')
ph_nomber = input('Введите ваш номер телефона: ')


def func(name, s_name, year, city, email, ph_nomber):
    return name, s_name, year, city, email, ph_nomber


print(
    f"Имя - {name}; Фамилия - {s_name}; Год рождения - {year}; Город - {city}; Адрес эл. почты - {email}; телефон - {ph_nomber}")

"""3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов."""


def my_func(x, y, z):
    if x >= z and y >= z:
        return x + y
    elif y < x < z:
        return x + z
    else:
        return y + z


print(f'Результат - {my_func(int(input("Введите первое число: ")), int(input("Введите второе число: ")), int(input("Введите третье число: ")))}')

""" 4. Программа принимает действительное положительное число x и целое отрицательное число y. 
Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y). 
При решении задания нужно обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. 
Второй — более сложная реализация без оператора **, предусматривающая использование цикла."""


def my_func():
    x = float(input("Введите положительное число, возводимое в степень: "))
    y = float(input("Введите степень ввиде целого отрацельного числа: "))
    res = x ** y
    return res


print(f'Рузультат - {my_func()}')

""" 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. 
При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. 
Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. 
Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу."""


def sum():
    sum_res = 0
    ext = False
    while not ext:
        numb = input('введите числа через пробел или s - для выхода ').split()
        res = 0
        for el in range(len(numb)):
            if numb[el] == 's':
                ext = True
                break
            else:
                res = res + int(numb[el])
        sum_res = sum_res + res
        print(f'сумма = {sum_res}')
    print(f'общая сумма = {sum_res}')


sum()

""" 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной первой буквой. 
Например, print(int_func(‘text’)) -> Text."""


def int_func ():
    wrd = input("Введите слово: ")
    print(wrd.title())
    return


int_func()

"""7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. 
Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. 
Используйте написанную ранее функцию int_func()."""


def int_func():
    wrd = input("Введите слова: ")
    print(wrd.title())
    return


int_func()
